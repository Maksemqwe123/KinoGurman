# -*- coding: utf-8 -*-

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext


from parser_desserts import *
from KinoGurman.db_postgres import *
from buttons import *

import random
import logging

logging.basicConfig(filename='//cook_bot/my_log_bot_cook.log', filemode='w+', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

list_name_desserts = []

db = MyDBPostgres()


bot = Bot(token=TOKEN_DESSERT)
dp = Dispatcher(bot, storage=MemoryStorage())


class SpecifyProducts(StatesGroup):
    state_products = State()


@dp.message_handler(commands='start', state='*')
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—åü•ßüç¶', reply_markup=user_kb)
    if not db.select_table('db_dessert', message.from_user.id):
        print(message.from_user.id, message.from_user.username, '"' + strings_date + '"')
        db.insert_table_db_dessert(message.from_user.id, message.from_user.username, "'" + strings_date + "'")


@dp.message_handler(commands='cancel', state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå', reply_markup=user_kb)


@dp.callback_query_handler(text='dessert_product', state=None)
async def products_users(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Å–µ—Ä—ÇüçØüå∞ü•õ, '
                           '—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å–µ —á–µ—Ä–µ–∑ –∑–∞–ø–µ—Ç—É—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏')
    time.sleep(2)
    await bot.send_message(callback_query.from_user.id, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: –ú—É–∫–∞ —è–π—Ü–∞_–º–æ–ª–æ–∫–æ. –æ—Ä–µ—Ö–∏')
    await bot.send_message(callback_query.from_user.id, '‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω–æ: –ú—É–∫–∞, –º—ë–¥, –º–æ–ª–æ–∫–æ, –æ—Ä—ë—Ö–∏, —Å–≥—É—â—ë–Ω–∫–∞')

    await SpecifyProducts.state_products.set()


@dp.message_handler(state=SpecifyProducts.state_products)
async def products_specify(message: types.Message, state: FSMContext):
    text = message.text.encode("utf-8").decode('utf-8')
    ParserSelenium(text)
    all_info_dessert_selenium = list(zip(name_desserts_selenium, urls_selenium))

    for i in all_info_dessert_selenium[0:4]:
        list_dessert_selenium = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0].strip()} \n–°—Å—ã–ª–∫–∞: {i[1]}'
        await message.answer(list_dessert_selenium)
    await bot.send_message(message.from_user.id, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—åüç©üç™', reply_markup=user_kb)

    name_desserts_selenium.clear()
    urls_selenium.clear()

    await state.finish()


@dp.callback_query_handler(text='choose_dessert')
async def dessert_users(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—åüç∞üßÅü•ßüç¶üç™',
                           reply_markup=user_dessert)


@dp.callback_query_handler(lambda call: True)
async def dessert_users(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    store_buttons_clicked = callback_query.data
    db.update_db_dessert(callback_query.from_user.id, store_buttons_clicked)
    values = name_urls.get(f'{store_buttons_clicked}')

    Parser(range(0, 4), f'{values}')

    all_info_dessert = list(zip(name_desserts, urls))

    for i in all_info_dessert:
        list_dessert = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i[0]} \n–°—Å—ã–ª–∫–∞: {i[1]}'
        dessert_random.append(list_dessert)

    dessert_message = random.choice(dessert_random)
    dessert_message_1 = random.choice(dessert_random)
    dessert_message_2 = random.choice(dessert_random)

    await bot.send_message(callback_query.from_user.id, dessert_message)
    await bot.send_message(callback_query.from_user.id, dessert_message_1)
    await bot.send_message(callback_query.from_user.id, dessert_message_2, reply_markup=user_kb)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
